Project Neurogenesis Change Log

1/4/2019
    - Adds GetCurrentNormalizedOutput to Neuron which squashes current_output using: x / (1 + abs(x)). I am not sure if this is preferable over using current_output directly, so I will leave unoptimized.
    - Adds filename and dirs to config file.
    - Adds initial function to build new layers.
    - Changes Layer struct to store weak_ptrs to child layers. Owning shared_ptr is stored in the Model object.
    - Reworks the makefile and divides up the source into neuro, sim and viewer. This is prep work for an additional executable I plan on building that will allow you to view a network and add layers by hand.

1/5/2019
    - Changes DTree to store a weak_ptr to relevant Synapses.
    - Adds first BuildModel function, BuildModel_A_0. First foray into multilayer models.
    - Fixes bug in DataWriter due to no assignment operator for SpikeData struct.
    - Fixes bug in DataWriter due to path and filename confusion.
    - Adds an id to Layer so that recorded spikes can be traced back to the Layer and Neuron.
    - Loading and Saving models appears to be working.
    - Recording spikes appears to be working.

1/6/2019
    - Adds bylayer.py. First bit of visualization code in Python. Currently, it displays a raster plot of each layer in default colors.
    - Adds -d command line option by which a user can set up multiple runs of the same or different datasets.
    - Adds dendritic tree growth and rate to the LayerTemplate.
    - Fixes a host of bugs as the project moves toward a first working version with actual neurogenesis.

1/9/2019
    - Adds layer and neuron count output to any recording. The first data written for a session is: [NUMBER OF LAYERS] [NEURONS LAYER 0] ... [NEURONS LAYER N-1]. Each of these entries is 8 bytes.
    - Updates bylayer.py to reflect the change above.
    - Adds a three layer model A_1.

1/10/2019
    - Adds ability for Synapses to mature without oversight.
    - Adds ability for DTrees to delete themselves if a pre-set number of their synapses reach maturity. Since DTrees do not store references to their synapses, they keep a counter that increments when a synapse reaches maturity. When the threshold is reached, the DTree deactivates itself. Immature synapses check if their DTree is active when updating. If it isn't, they deactivate themselves.